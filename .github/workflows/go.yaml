name: go

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:  
  contents: read

jobs:
  unit:
    runs-on: ubuntu-latest
    name: Thanos unit tests
    env:
      THANOS_TEST_OBJSTORE_SKIP: GCS,S3,AZURE,COS,ALIYUNOSS,BOS,OCI,OBS,SWIFT
      OS_AUTH_URL: http://127.0.0.1:5000/v2.0
      OS_PASSWORD: s3cr3t
      OS_PROJECT_NAME: admin
      OS_REGION_NAME: RegionOne
      OS_USERNAME: admin
      GOBIN: /tmp/.bin
    services:
      swift:
        image: 'quay.io/thanos/docker-swift-onlyone-authv2-keystone:v0.1'
        ports:
          - 5000:5000
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go.
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: 1.24.x

      - name: Install bingo modules
        run: make install-tool-deps
      - name: Add GOBIN to path
        run: echo "/tmp/.bin" >> $GITHUB_PATH
      - name: Run unit tests
        run: make test

  cross-build-check:
    runs-on: ubuntu-latest
    name: Go build for different platforms
    env:
      GOBIN: /tmp/.bin
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: 1.24.x

      - uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/golangci-lint
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cross build check
        run: make crossbuild

  build-stringlabels:
    runs-on: ubuntu-latest
    name: Go build with -tags=stringlabels
    env:
      GOBIN: /tmp/.bin
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Install Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: 1.24.x

    - uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      with:
        path: |
          ~/.cache/go-build
          ~/.cache/golangci-lint
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cross build check
      run: go build -tags=stringlabels ./cmd/thanos

  lint:
    runs-on: ubuntu-latest
    name: Linters (Static Analysis) for Go
    env:
      GOBIN: /tmp/.bin
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: 1.24.x

      - uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/golangci-lint
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Format.
        run: make format

      - name: Linting & vetting
        run: make go-lint

  codespell:
    runs-on: ubuntu-latest
    name: Check misspelled words
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run codespell
        uses: codespell-project/actions-codespell@v2
        with:
          check_filenames: false
          check_hidden: true
          skip: ./pkg/ui/*,./pkg/store/6545postingsrepro,./internal/*,./mixin/vendor/*,./.bingo/*,go.mod,go.sum
          ignore_words_list: intrumentation,mmaped,nd,ot,re-use,ser,serie,sme,sudu,tast,te,ans

  e2e:
    strategy:
      fail-fast: false
      matrix:
        parallelism: [8]
        index: [0, 1, 2, 3, 4, 5, 6, 7]
    runs-on: ubuntu-24.04
    name: Thanos end-to-end tests
    env:
      GOBIN: /tmp/.bin
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go.
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: 1.24.x

      - uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/golangci-lint
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Run e2e docker-based tests
        run: make test-e2e GH_PARALLEL=${{ matrix.parallelism }} GH_INDEX=${{ matrix.index }}

  docker-build:
    runs-on: ubuntu-latest
    name: Docker build and publish multi-platform
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform: 
          - linux/amd64
          - linux/arm64
          - linux/ppc64le
          - linux/s390x
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract architecture and SHA
        id: arch-info
        run: |
          ARCH=$(echo "${{ matrix.platform }}" | cut -d'/' -f2)
          SHA=$(grep "^${ARCH}=" .busybox-versions | cut -d'=' -f2)
          echo "arch=${ARCH}" >> $GITHUB_OUTPUT
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
          echo "Building for ${ARCH} with SHA: ${SHA}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,suffix=-${{ steps.arch-info.outputs.arch }}
            type=ref,event=pr,suffix=-${{ steps.arch-info.outputs.arch }}
            type=semver,pattern={{version}},suffix=-${{ steps.arch-info.outputs.arch }}
            type=raw,value=latest,suffix=-${{ steps.arch-info.outputs.arch }},enable={{is_default_branch}}

      - name: Build and push platform-specific image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: .
          file: ./Dockerfile.multi-stage
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_DOCKER_SHA=${{ steps.arch-info.outputs.sha }}
          cache-from: type=gha,scope=${{ steps.arch-info.outputs.arch }}
          cache-to: type=gha,mode=max,scope=${{ steps.arch-info.outputs.arch }}

  docker-manifest:
    runs-on: ubuntu-latest
    name: Create and push multi-platform manifest
    needs: docker-build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for manifest
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-platform manifest
        run: |
          # Convert multi-line tags to array for proper iteration
          tags="${{ steps.meta.outputs.tags }}"
          for tag in $tags; do
            docker buildx imagetools create \
              --tag $tag \
              $tag-amd64 \
              $tag-arm64 \
              $tag-ppc64le \
              $tag-s390x
          done
